{"ast":null,"code":"var _jsxFileName = \"/Users/kailaburgin/Development/appointmentplanner/src/App.js\",\n  _s = $RefreshSig$();\nimport { getDefaultNormalizer } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport { RouterProvider, createBrowserRouter, createRoutesFromElements, Route, Navigate } from \"react-router-dom\";\nimport Root, { ROUTES } from \"./components/root/Root\";\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\n  //below will set the array of contacts\n  const [contacts, setContacts] = useState([{\n    id: 1,\n    name: \"Bob Smith\",\n    phone: 5551234567,\n    email: \"bobsmith@gmail.com\"\n  }, {\n    id: 2,\n    name: \"Jane Doe\",\n    phone: 5552345678,\n    email: \"janedoe@gmail.com\"\n  }, {\n    id: 3,\n    name: \"John Test\",\n    phone: 5553456789,\n    email: \"johntest@gmail.com\"\n  }]);\n\n  //below sets the appointments\n  const [appointments, setAppointments] = useState([{\n    id: 1,\n    name: \"Bob Smith\",\n    phone: 5551234567,\n    email: \"bobsmith@gmail.com\",\n    date: \"03/18/3024\",\n    time: \"2:00p\"\n  }, {\n    id: 2,\n    name: \"Jane Doe\",\n    phone: 5552345678,\n    email: \"janedoe@gmail.com\",\n    date: \"03/20/3024\",\n    time: \"1:00p\"\n  }, {\n    id: 3,\n    name: \"John Test\",\n    phone: 5553456789,\n    email: \"johntest@gmail.com\",\n    date: \"03/22/3024\",\n    time: \"12:00p\"\n  }]);\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\n\n  function addContact(contact) {\n    const existingContact = contacts.find(c => c.name === contact.name);\n    if (existingContact) {\n      console.log(\"Track already exists\");\n    } else {\n      setPlaylistTracks([...playlistTracks, track]);\n    }\n  }\n  const router = createBrowserRouter(createRoutesFromElements( /*#__PURE__*/_jsxDEV(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 32\n    }, this),\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Navigate, {\n        to: ROUTES.CONTACTS,\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 31\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.CONTACTS,\n      element: /*#__PURE__*/_jsxDEV(ContactsPage, {\n        contacts: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }, this) /* Add props to ContactsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: ROUTES.APPOINTMENTS,\n      element: /*#__PURE__*/_jsxDEV(AppointmentsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 20\n      }, this) /* Add props to AppointmentsPage */\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 7\n  }, this)));\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"23cFgpch4BrsBUo5pQReLYE++Vc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["getDefaultNormalizer","React","useState","RouterProvider","createBrowserRouter","createRoutesFromElements","Route","Navigate","Root","ROUTES","AppointmentsPage","ContactsPage","jsxDEV","_jsxDEV","App","_s","contacts","setContacts","id","name","phone","email","appointments","setAppointments","date","time","addContact","contact","existingContact","find","c","console","log","setPlaylistTracks","playlistTracks","track","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","to","CONTACTS","replace","APPOINTMENTS","_c","$RefreshReg$"],"sources":["/Users/kailaburgin/Development/appointmentplanner/src/App.js"],"sourcesContent":["import { getDefaultNormalizer } from \"@testing-library/react\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  RouterProvider,\r\n  createBrowserRouter,\r\n  createRoutesFromElements,\r\n  Route,\r\n  Navigate,\r\n} from \"react-router-dom\";\r\nimport Root, { ROUTES } from \"./components/root/Root\";\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n  //below will set the array of contacts\r\n  const [contacts, setContacts] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"Bob Smith\",\r\n      phone: 5551234567,\r\n      email: \"bobsmith@gmail.com\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Jane Doe\",\r\n      phone: 5552345678,\r\n      email: \"janedoe@gmail.com\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"John Test\",\r\n      phone: 5553456789,\r\n      email: \"johntest@gmail.com\",\r\n    },\r\n  ]);\r\n\r\n  //below sets the appointments\r\n  const [appointments, setAppointments] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"Bob Smith\",\r\n      phone: 5551234567,\r\n      email: \"bobsmith@gmail.com\",\r\n      date: \"03/18/3024\",\r\n      time: \"2:00p\",\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Jane Doe\",\r\n      phone: 5552345678,\r\n      email: \"janedoe@gmail.com\",\r\n      date: \"03/20/3024\",\r\n      time: \"1:00p\",\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"John Test\",\r\n      phone: 5553456789,\r\n      email: \"johntest@gmail.com\",\r\n      date: \"03/22/3024\",\r\n      time: \"12:00p\",\r\n    },\r\n  ]);\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  function addContact(contact) {\r\n    const existingContact = contacts.find((c) => c.name === contact.name);\r\n    if (existingContact) {\r\n      console.log(\"Track already exists\");\r\n    } else {\r\n      setPlaylistTracks([...playlistTracks, track]);\r\n    }\r\n  }\r\n\r\n  const router = createBrowserRouter(\r\n    createRoutesFromElements(\r\n      <Route path=\"/\" element={<Root />}>\r\n        <Route index element={<Navigate to={ROUTES.CONTACTS} replace />} />\r\n        <Route\r\n          path={ROUTES.CONTACTS}\r\n          element={<ContactsPage contacts={contacts} /> /* Add props to ContactsPage */}\r\n        />\r\n        <Route\r\n          path={ROUTES.APPOINTMENTS}\r\n          element={<AppointmentsPage /> /* Add props to AppointmentsPage */}\r\n        />\r\n      </Route>\r\n    )\r\n  );\r\n\r\n  return <RouterProvider router={router} />;\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}